# suppress inspection "UnusedProperty" for whole file

## Project Configuration
sonar.organization=thisiscpta
sonar.projectKey=thisiscpta_github-action-maven-example-start

# If true, the quality gate is not checked. By default the build will break if the project does not pass the quality gate.
# sonar.buildbreaker.skip=true
# Encoding of the source files.
sonar.sourceEncoding=UTF-8

# Control the quantity/level of logs produced during an analysis
# sonar.log.level=DEBUG
# adds more detail to both client and server-side analysis logs
# sonar.verbose=true
# Set to true if this project belongs to a monorepo. This enables better support for pull requests. This setting is currently only working for Azure DevOps repositories.
# sonar.project.monorepo.enabled=true
# The issue tracker being used.
# sonar.links.issue=https://github.com/[YOUR REPO]/issues
# The project source code repository.
sonar.links.scm=https://github.com/thisiscpta/

# Enable the summary comment in the Conversation tab when decorating Pull Requests
# sonar.pullrequest.github.summary_comment=true
# Comma-separated paths to directories containing main source files.
# sonar.sources=
# sonar.exclusions=
# Comma-separated paths to directories containing test source files.
# sonar.tests=
# sonar.test.inclusions=

## TypeScript
# Path (relative to project base or absolute) to the tsconfig JSON file
# sonar.typescript.tsconfigPath=
# List of suffixes for files to analyze.
# sonar.typescript.file.suffixes=.tsx,.ts

## JavaScript
# List of suffixes for files to analyze.
# sonar.javascript.file.suffixes=.jsx,.js
# JavaScript execution environments
# sonar.javascript.environments=jest,node
# True to not count file header comments in comment metrics.
# sonar.javascript.ignoreHeaderComments=true

## Test Coverage
# see https://sonarcloud.io/documentation/analysis/coverage/
# Comma-delimited list of paths to LCOV coverage report files. Paths may be absolute or relative to project
# sonar.javascript.lcov.reportPaths=
# Patterns used to exclude some files from coverage report.
# sonar.coverage.exclusions=

## Test Execution
# for test execution: You can use jest-sonar-reporter (https://www.npmjs.com/package/jest-sonar-reporter)
# or karma-sonarqube-unit-reporter (https://github.com/tornaia/karma-sonarqube-unit-reporter) to
# create reports in the Generic Execution Data format. Both packages are available on npm.
# sonar.testExecutionReportPaths=
# See https://github.com/3dmind/jest-sonar-reporter/issues/22
# Would love this too. We use nx (https://nx.dev/) as a monorepo with only one package.json but
# different jest.configs for every app and lib. A configuration with jest.config would make some things easier.
# The solution with the node environment variable works, but is not optimal for our use case.

# External issues:
# https://sonarcloud.io/documentation/analysis/external-issues/
# Comma-delimited list of paths to JSON ESLint reports (use -f json ESLint option)
# sonar.eslint.reportPaths
# Comma-delimited list of paths to TSLint reports in JSON format (use -t json TSLint option)
# sonar.typescript.tslint.reportPaths=
# Comma-delimited list of paths to StyleLint.io reports
# sonar.css.stylelint.reportPaths =
