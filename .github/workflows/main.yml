
name: Maven CI/CD

on:
 push:
    branches: [ master ]
 pull_request:
    branches: [ master ]
 workflow_dispatch:
 
jobs:
  build_and_test:
    
    runs-on: ubuntu-latest
    name: Build and test
    timeout-minutes: 4

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14

    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2 
        
    - name: Build project with Maven
      run: mvn -B package --file pom.xml

  compliance_checks:
      needs: [build_and_test]
      name: Compliance checks
      uses: ./.github/workflows/compliant-scan.yml
      with:
         config-path: .github/labeler.yml
      secrets:
            inherit
        
  package-job:
  
      runs-on: ubuntu-latest
      name: Package job
      needs: [compliance_checks]
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 14
        - run: mvn -B package --file pom.xml -DskipTests
        - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
        - uses: actions/upload-artifact@v1
          with:
            name: github-action-maven-tutorial-1.0-SNAPSHOT-jar-with-dependencies.jar
            path: staging
        
  build-docker-image:
    name: Publish to docker hub
    runs-on: ubuntu-latest
    needs: [package-job]

    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Container image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .
      - name: Publish Docker image
        run: docker push ${{ secrets.DOCKER_REPO }}

  deploy_env_setup:
    runs-on: ubuntu-latest
    name: Prepare environment
    needs: [package-job]    
    steps:
      - name: Set env vars (dev)
        if: endsWith(github.ref, '/dev')
        run: |
          echo "AZURE_FUNCTIONAPP_NAME=azfunccdgh-dev-function-app" >> $GITHUB_ENV
          echo "PUBLISH_PROFILE_VAR_NAME=AZURE_FUNCTIONAPP_PUBLISH_PROFILE_DEV" >> $GITHUB_ENV
          echo "line 1 $GITHUB_ENV"
      - name: Set env vars (prod)
        if: endsWith(github.ref, '/master')
        run: |
          echo "AZURE_FUNCTIONAPP_NAME=azfunccdgh-prod-function-app" >> $GITHUB_ENV
          echo "PUBLISH_PROFILE_VAR_NAME=AZURE_FUNCTIONAPP_PUBLISH_PROFILE_PROD" >> $GITHUB_ENV
          echo "Line 2 $GITHUB_ENV"
          echo "line 3 ${{ github.ref }}"
      - name: Output SSH key to file
        id: testingop
        run: |
          mkdir ~/.ssh
          echo "${{secrets.ANSIBLE_ENGINE_SSH_KEY}}" > ~/.ssh/id_rsa_cassandra
          chmod 600 ~/.ssh/id_rsa_cassandra
          echo "version=123test" >> $GITHUB_OUTPUT
          echo `$(cat ~/.ssh/id_rsa_cassandra)`
          echo "HELLO ${{ steps.testingop.outputs.version.value }}"
          
  deploy_to_env:
      needs: [deploy_env_setup]
      name: Deploy to SIT
      uses: ./.github/workflows/deploy.yml
      with:
         which-env: SIT
      secrets:
            inherit
