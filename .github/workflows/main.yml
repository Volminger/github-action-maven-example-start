name: Maven CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mesh_comm
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1    
      with:
        path: ~/.m2  
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build project with Maven
      run: mvn -B package -f pom.xml

  gen-javadocs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mesh_comm
    needs: [build_and_test]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Generate javadocs
      run: javadoc -d docs/javadoc/ $(find src/main/java -type f)
    - name: setup git config
      run: |
        # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
    - name: commit
      run: |
        # Stage the file, commit and push
        git add docs/javadoc
        git commit -m "Doc: regenerate javadocs"
        git push origin ${GITHUB_REF##*/}

  publish-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mesh_comm
    needs: [build_and_test]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - run: mvn -B package -f pom.xml -DskipTests
      - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: mesh_comm/staging
